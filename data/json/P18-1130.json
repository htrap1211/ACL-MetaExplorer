{
  "id": "P18-1130",
  "title": "Stack-Pointer Networks for Dependency Parsing",
  "authors": [
    "Ma, Xuezhe  and\nHu, Zecong  and\nLiu, Jingzhou  and\nPeng, Nanyun  and\nNeubig, Graham  and\nHovy, Eduard"
  ],
  "year": "2018",
  "venue": "Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)",
  "abstract": "We introduce a novel architecture for dependency parsing: stack-pointer networks (StackPtr). Combining pointer networks (Vinyals et al., 2015) with an internal stack, the proposed model first reads and encodes the whole sentence, then builds the dependency tree top-down (from root-to-leaf) in a depth-first fashion. The stack tracks the status of the depth-first search and the pointer networks select one child for the word at the top of the stack at each step. The StackPtr parser benefits from the information of whole sentence and all previously derived subtree structures, and removes the left-to-right restriction in classical transition-based parsers. Yet the number of steps for building any (non-projective) parse tree is linear in the length of the sentence just as other transition-based parsers, yielding an efficient decoding algorithm withO(n2)time complexity. We evaluate our model on 29 treebanks spanning 20 languages and different dependency annotation schemas, and achieve state-of-the-art performances on 21 of them",
  "keywords": [
    "parsing",
    "efficient",
    "the dependency tree top-down",
    "dependency parsing",
    "we",
    "different dependency annotation schemas",
    "information",
    "word",
    "et",
    "model",
    "dependency",
    "time",
    "performances",
    "state",
    "29 treebanks"
  ],
  "url": "https://aclanthology.org/P18-1130/",
  "provenance": {
    "collected_at": "2025-06-05 00:12:32",
    "source": "ACL Anthology",
    "version": "1.0"
  }
}